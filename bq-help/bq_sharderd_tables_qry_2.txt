with tables as (
select
project_id as table_database,
dataset_id as table_schema,
table_id as original_table_name,

concat(project_id, '.', dataset_id, '.', table_id) as relation_id,

row_count,
size_bytes as size_bytes,
case
when type = 1 then 'table'
when type = 2 then 'view'
else 'external'
end as table_type,

REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,
REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,
REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name

from `pch-app-2014.ManagingExits`.__TABLES__
--where (upper(dataset_id) = upper('user_profile'))
),

table_options as (
select
concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,
JSON_VALUE(option_value) as table_comment

from `pch-app-2014.ManagingExits`.INFORMATION_SCHEMA.TABLE_OPTIONS
where option_name = 'description'
),
extracted as (

select *,
case
when is_date_shard then shard_base_name
else original_table_name
end as table_name

from tables

),

unsharded_tables as (

select
table_database,
table_schema,
table_name,
coalesce(table_type, 'external') as table_type,
is_date_shard,

struct(
min(shard_name) as shard_min,
max(shard_name) as shard_max,
count(*) as shard_count
) as table_shards,

sum(size_bytes) as size_bytes,
sum(row_count) as row_count,

max(relation_id) as relation_id

from extracted
group by 1,2,3,4,5

),

info_schema_columns as (

select
concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,
table_catalog as table_database,
table_schema,
table_name,

-- use the "real" column name from the paths query below
column_name as base_column_name,
ordinal_position as column_index,

is_partitioning_column,
clustering_ordinal_position

from `pch-app-2014.ManagingExits`.INFORMATION_SCHEMA.COLUMNS
where ordinal_position is not null

),

info_schema_column_paths as (

select
concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,
field_path as column_name,
data_type as column_type,
column_name as base_column_name,
description as column_comment

from `pch-app-2014.ManagingExits`.INFORMATION_SCHEMA.COLUMN_FIELD_PATHS

),

columns as (

select * except (base_column_name)
from info_schema_columns
join info_schema_column_paths using (relation_id, base_column_name)

),

column_stats as (

select
table_database,
table_schema,
table_name,
max(relation_id) as relation_id,
max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,
max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,
max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,
array_to_string(
array_agg(
case
when clustering_ordinal_position is not null then column_name
else null
end ignore nulls
order by clustering_ordinal_position
), ', '
) as clustering_columns

from columns
group by 1,2,3

)

select
unsharded_tables.table_database,
unsharded_tables.table_schema,
case
when is_date_shard then concat(unsharded_tables.table_name, '*')
else unsharded_tables.table_name
end as table_name,
unsharded_tables.table_type,
table_options.table_comment,

-- coalesce name and type for External tables - these columns are not
-- present in the COLUMN_FIELD_PATHS resultset
coalesce(columns.column_name, '<unknown>') as column_name,
-- invent a row number to account for nested fields -- BQ does
-- not treat these nested properties as independent fields
row_number() over (
partition by relation_id
order by columns.column_index, columns.column_name
) as column_index,
coalesce(columns.column_type, '<unknown>') as column_type,
columns.column_comment,

table_shards.shard_count as `stats__date_shards__value`,
is_date_shard as `stats__date_shards__include`,

table_shards.shard_min as `stats__date_shard_min__value`,
is_date_shard as `stats__date_shard_min__include`,

table_shards.shard_max as `stats__date_shard_max__value`,
is_date_shard as `stats__date_shard_max__include`,

row_count as `stats__num_rows__value`,
(unsharded_tables.table_type = 'table') as `stats__num_rows__include`,
ROUND((((size_bytes ))/ POW(2,30)),2)  as `stats__num_bytes_gb__value`,
(unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,

partition_column as `stats__partitioning_type__value`,
is_partitioned as `stats__partitioning_type__include`,
clustering_columns as `stats__clustering_fields__value`,
is_clustered as `stats__clustering_fields__include`

-- join using relation_id (an actual relation, not a shard prefix) to make
-- sure that column metadata is picked up through the join. This will only
-- return the column information for the "max" table in a date-sharded table set
from unsharded_tables
left join table_options using (relation_id)
left join columns using (relation_id)
left join column_stats using (relation_id)



====================
with tables as (
select
project_id as table_database,
dataset_id as table_schema,
table_id as original_table_name,

concat(project_id, '.', dataset_id, '.', table_id) as relation_id,

row_count,
size_bytes as size_bytes,
case
when type = 1 then 'table'
when type = 2 then 'view'
else 'external'
end as table_type,

REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,
REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,
REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name,
TIMESTAMP_MILLIS(creation_time) AS creation_time,
TIMESTAMP_MILLIS(last_modified_time) AS last_modified_time
from `pch-app-2014.ManagingExits`.__TABLES__
--where (upper(dataset_id) = upper('user_profile'))
),

table_options as (
select
concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,
JSON_VALUE(option_value) as table_comment

from `pch-app-2014.ManagingExits`.INFORMATION_SCHEMA.TABLE_OPTIONS
where option_name = 'description'
),
extracted as (

select *,
case
when is_date_shard then shard_base_name
else original_table_name
end as table_name

from tables

),

unsharded_tables as (

select
table_database,
table_schema,
table_name,
coalesce(table_type, 'external') as table_type,
is_date_shard,

struct(
min(shard_name) as shard_min,
max(shard_name) as shard_max,
count(*) as shard_count
) as table_shards,

sum(size_bytes) as size_bytes,
sum(row_count) as row_count,

max(relation_id) as relation_id

from extracted
group by 1,2,3,4,5

),

get_dt as(
  select creation_time,
last_modified_time,relation_id from tables
),
info_schema_columns as (

select
concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,
table_catalog as table_database,
table_schema,
table_name,

-- use the "real" column name from the paths query below
column_name as base_column_name,
ordinal_position as column_index,

is_partitioning_column,
clustering_ordinal_position

from `pch-app-2014.ManagingExits`.INFORMATION_SCHEMA.COLUMNS
where ordinal_position is not null

),

info_schema_column_paths as (

select
concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,
field_path as column_name,
data_type as column_type,
column_name as base_column_name,
description as column_comment

from `pch-app-2014.ManagingExits`.INFORMATION_SCHEMA.COLUMN_FIELD_PATHS

),

columns as (

select * except (base_column_name)
from info_schema_columns
join info_schema_column_paths using (relation_id, base_column_name)

),

column_stats as (

select
table_database,
table_schema,
table_name,
max(relation_id) as relation_id,
max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,
max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,
max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,
array_to_string(
array_agg(
case
when clustering_ordinal_position is not null then column_name
else null
end ignore nulls
order by clustering_ordinal_position
), ', '
) as clustering_columns

from columns
group by 1,2,3

)

select
unsharded_tables.table_database,
unsharded_tables.table_schema,
case
when is_date_shard then concat(unsharded_tables.table_name, '*')
else unsharded_tables.table_name
end as table_name,
unsharded_tables.table_type,
table_options.table_comment,

-- coalesce name and type for External tables - these columns are not
-- present in the COLUMN_FIELD_PATHS resultset
coalesce(columns.column_name, '<unknown>') as column_name,
-- invent a row number to account for nested fields -- BQ does
-- not treat these nested properties as independent fields
row_number() over (
partition by relation_id
order by columns.column_index, columns.column_name
) as column_index,
coalesce(columns.column_type, '<unknown>') as column_type,
columns.column_comment,

table_shards.shard_count as `stats__date_shards__value`,
is_date_shard as `stats__date_shards__include`,

table_shards.shard_min as `stats__date_shard_min__value`,
is_date_shard as `stats__date_shard_min__include`,

table_shards.shard_max as `stats__date_shard_max__value`,
is_date_shard as `stats__date_shard_max__include`,

row_count as `stats__num_rows__value`,
(unsharded_tables.table_type = 'table') as `stats__num_rows__include`,
ROUND((((size_bytes ))/ POW(2,30)),2)  as `stats__num_bytes_gb__value`,
(unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,

partition_column as `stats__partitioning_type__value`,
is_partitioned as `stats__partitioning_type__include`,
clustering_columns as `stats__clustering_fields__value`,
is_clustered as `stats__clustering_fields__include`,
creation_time,
last_modified_time,
-- join using relation_id (an actual relation, not a shard prefix) to make
-- sure that column metadata is picked up through the join. This will only
-- return the column information for the "max" table in a date-sharded table set
from unsharded_tables
left join table_options using (relation_id)
left join columns using (relation_id)
left join column_stats using (relation_id)
left join get_dt using (relation_id) 