/*
    Requests to create functions to transform ids into humanized ids in BigQuery.

    They need the file base32.js to be uploaded in GCS.
*/

CREATE OR REPLACE FUNCTION
    raw_dev.humanize_id(id INT64)
    RETURNS STRING
    LANGUAGE js OPTIONS ( library="gs://data-bucket-dev/base32-encode/base32.js" ) AS """
        // turn int into bytes array
        var byteArray = [];
        var updated_id = id;
        while (updated_id != 0) {
            var byte = updated_id & 0xff;
            byteArray.push(byte);
            updated_id = (updated_id - byte) / 256 ;
        }
        var reversedByteArray = byteArray.reverse();

        // apply base32 encoding
        var raw_b32 = base32Encode(new Uint8Array(reversedByteArray), 'RFC4648', { padding: false });

        // replace "O" with "8" and "I" with "9"
        return raw_b32.replace(/O/g, '8').replace(/I/g, '9');
    """;


CREATE OR REPLACE FUNCTION
    raw_dev.dehumanize_id(id STRING)
    RETURNS STRING
    LANGUAGE js OPTIONS (library=["gs://data-bucket-dev/base32-encode/base32.js"]) AS """
        var public_id = id.replace(/8/g, 'O').replace(/9/g, 'I');

        var byteArray = new Uint8Array(base32Decode(public_id, 'RFC4648')).reverse();

        var value = 0;
        for (var i = byteArray.length - 1; i >= 0; i--) {
            value = (value * 256) + byteArray[i];
        }
        return value;
    """;


base32.js 
var RFC4648 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'
var RFC4648_HEX = '0123456789ABCDEFGHIJKLMNOPQRSTUV'
var CROCKFORD = '0123456789ABCDEFGHJKMNPQRSTVWXYZ'

function base32Encode(buffer, variant, options) {
  options = options || {}
  var alphabet, defaultPadding

  switch (variant) {
    case 'RFC3548':
    case 'RFC4648':
      alphabet = RFC4648
      defaultPadding = true
      break
    case 'RFC4648-HEX':
      alphabet = RFC4648_HEX
      defaultPadding = true
      break
    case 'Crockford':
      alphabet = CROCKFORD
      defaultPadding = false
      break
    default:
      throw new Error('Unknown base32 variant: ' + variant)
  }

  var padding = (options.padding !== undefined ? options.padding : defaultPadding)
  var length = buffer.byteLength
  var view = new Uint8Array(buffer)

  var bits = 0
  var value = 0
  var output = ''

  for (var i = 0; i < length; i++) {
    value = (value << 8) | view[i]
    bits += 8

    while (bits >= 5) {
      output += alphabet[(value >>> (bits - 5)) & 31]
      bits -= 5
    }
  }

  if (bits > 0) {
    output += alphabet[(value << (5 - bits)) & 31]
  }

  if (padding) {
    while ((output.length % 8) !== 0) {
      output += '='
    }
  }

  return output
}


function readChar(alphabet, char) {
  var idx = alphabet.indexOf(char)

  if (idx === -1) {
    throw new Error('Invalid character found: ' + char)
  }

  return idx
}


function base32Decode(input, variant) {
  var alphabet

  switch (variant) {
    case 'RFC3548':
    case 'RFC4648':
      alphabet = RFC4648
      input = input.replace(/=+$/, '')
      break
    case 'RFC4648-HEX':
      alphabet = RFC4648_HEX
      input = input.replace(/=+$/, '')
      break
    case 'Crockford':
      alphabet = CROCKFORD
      input = input.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')
      break
    default:
      throw new Error('Unknown base32 variant: ' + variant)
  }

  var length = input.length

  var bits = 0
  var value = 0

  var index = 0
  var output = new Uint8Array((length * 5 / 8) | 0)

  for (var i = 0; i < length; i++) {
    value = (value << 5) | readChar(alphabet, input[i])
    bits += 5

    if (bits >= 8) {
      output[index++] = (value >>> (bits - 8)) & 255
      bits -= 8
    }
  }

  return output.buffer
}


========================
==================================================================
declare VARencryptToken STRING  DEFAULT  'LhqjWKrAVBB6SBWv';
declare VARlobAccesscode STRING DEFAULT 'qmNG5JCKf48GVo3jahyq0P0AxY271fC6nbobqh5Xcf499LpOPKnqmNM4PqNB7Vo3';
DECLARE var_now TIMESTAMP DEFAULT  TIMESTAMP_ADD(CURRENT_TIMESTAMP(),INTERVAL 10 MINUTE);
DECLARE var_time_string STRING DEFAULT FORMAT_TIMESTAMP("%y%m%d%H%M",var_now);
DECLARE var_bites BYTES DEFAULT  SHA1(CAST( CONCAT(var_time_string,VARencryptToken,VARlobAccesscode) AS BYTES));
DECLARE var_string_key_to_encr STRING DEFAULT TO_BASE64(var_bites) ;

 

DECLARE var_keyset bytes;
declare var_bites_key bytes;
declare  ciphartext bytes;

 

set var_keyset = KEYS.NEW_KEYSET('AEAD_AES_GCM_256');
set var_bites_key = KEYS.ADD_KEY_FROM_RAW_BYTES(var_keyset, 'AES_CBC_PKCS', cast('0123456789012345' as bytes));

 

SELECT AEAD.ENCRYPT(var_bites_key, var_string_key_to_encr, 'test');
set ciphartext = (SELECT AEAD.ENCRYPT(var_bites_key, var_string_key_to_encr, 'test'));

 

SELECT var_string_key_to_encr, CAST(AEAD.DECRYPT_STRING(var_bites_key, ciphartext, 'test') AS STRING);